/* The following code was generated by JFlex 1.6.1-SNAPSHOT */

package cc.factorie.app.nlp.segment.es

import java.io.Reader
import java.util.logging.Logger
import java.util.Properties


import scala.util.control.Breaks._

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1-SNAPSHOT
 * from the specification file <tt>/home/pv/factorie/src/main/scala/cc/factorie/app/nlp/segment/es/SmallLexer.flex</tt>
 */
class SmallLexer(in: Reader)  {

  /** This character denotes the end of file */
  final val YYEOF = -1

  /** initial size of the lookahead buffer */
  final val ZZ_BUFFERSIZE = 16384

  /** lexical states */
  final val YYINITIAL = 0

  /**
   * ZZ_LEXSTATE(l) is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE(l+1) is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  final val ZZ_LEXSTATE = Array[Int]( 
     0, 0
  )

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP_PACKED: String = 
    "\11\0\5\16\22\0\1\16\5\0\1\1\32\0\1\3\1\15\1\4"+
    "\1\15\1\7\1\15\1\10\1\15\1\2\2\15\1\14\1\13\1\17"+
    "\1\20\2\15\1\11\1\15\1\6\1\5\1\12\4\15\6\0\1\3"+
    "\1\15\1\4\1\15\1\7\1\15\1\10\1\15\1\2\2\15\1\14"+
    "\1\13\1\17\1\20\2\15\1\11\1\15\1\6\1\5\1\12\4\15"+
    "\12\0\1\16\32\0\1\16\11\0\1\15\2\0\1\15\7\0\1\15"+
    "\4\0\1\15\5\0\27\15\1\0\37\15\1\0\u013f\15\31\15\162\15"+
    "\4\15\14\15\16\15\5\15\7\15\1\15\1\15\1\15\201\15\5\15"+
    "\1\15\2\15\2\15\4\15\1\0\1\15\4\0\2\15\1\15\1\0"+
    "\3\15\1\0\1\15\1\0\24\15\1\0\54\15\1\15\46\15\1\15"+
    "\5\15\4\15\202\15\1\0\5\15\2\0\105\15\1\15\46\15\12\15"+
    "\20\15\26\15\12\15\1\0\46\15\2\0\1\15\6\15\1\0\47\15"+
    "\11\0\55\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\1\15"+
    "\10\0\33\15\5\0\3\15\42\0\6\15\5\0\33\15\5\15\13\15"+
    "\24\15\17\0\2\15\1\15\143\15\1\0\1\15\17\15\2\15\7\15"+
    "\2\15\12\0\3\15\2\15\1\15\17\0\1\15\1\15\1\15\36\15"+
    "\35\15\63\15\46\15\13\15\1\15\30\0\41\15\11\15\2\15\4\0"+
    "\1\15\5\0\26\15\4\0\1\15\11\0\1\15\3\0\1\15\27\0"+
    "\31\15\107\0\23\15\115\0\4\15\66\15\2\0\1\15\1\15\21\15"+
    "\1\0\1\15\5\15\2\0\12\15\2\15\15\0\20\15\3\15\1\0"+
    "\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0\1\15\3\0"+
    "\4\15\2\0\1\15\1\15\7\15\2\0\2\15\2\0\3\15\1\15"+
    "\10\0\1\15\4\0\2\15\1\0\3\15\2\15\14\0\2\15\17\0"+
    "\3\15\1\0\6\15\4\0\2\15\2\0\26\15\1\0\7\15\1\0"+
    "\2\15\1\0\2\15\1\0\2\15\2\0\1\15\1\0\22\15\11\0"+
    "\4\15\1\0\1\15\23\0\3\15\14\0\3\15\1\0\11\15\1\0"+
    "\3\15\1\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0"+
    "\1\15\1\15\22\15\1\15\17\0\2\15\43\0\10\15\2\0\2\15"+
    "\2\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\3\0\1\15"+
    "\36\0\2\15\1\0\3\15\17\0\1\15\20\0\1\15\1\15\1\0"+
    "\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15\1\0"+
    "\2\15\3\0\2\15\3\0\3\15\3\0\14\15\4\0\5\15\3\0"+
    "\3\15\1\0\4\15\2\0\1\15\60\0\3\15\1\0\10\15\1\0"+
    "\3\15\1\0\27\15\1\0\20\15\3\0\1\15\31\15\1\0\2\15"+
    "\6\0\2\15\43\0\10\15\1\0\3\15\1\0\27\15\1\0\12\15"+
    "\1\0\5\15\3\0\1\15\40\0\1\15\1\0\2\15\17\0\2\15"+
    "\22\0\10\15\1\0\3\15\1\0\51\15\2\0\1\15\7\15\1\0"+
    "\3\15\5\0\1\15\21\0\2\15\30\0\6\15\5\0\22\15\3\0"+
    "\30\15\1\0\11\15\1\0\1\15\2\0\7\15\72\0\57\15\1\15"+
    "\1\15\2\15\7\15\5\0\7\15\10\15\62\0\2\15\1\0\1\15"+
    "\2\0\2\15\1\0\1\15\2\0\1\15\6\0\4\15\1\0\7\15"+
    "\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\4\15"+
    "\1\15\2\15\11\15\1\15\2\0\5\15\1\0\1\15\1\0\6\15"+
    "\16\0\4\15\40\0\1\15\77\0\10\15\1\0\44\15\33\0\5\15"+
    "\163\0\53\15\24\0\1\15\20\0\6\15\4\0\4\15\3\0\1\15"+
    "\3\0\2\15\7\0\3\15\4\0\15\15\14\0\1\15\21\0\46\15"+
    "\1\0\1\15\5\0\1\15\2\0\53\15\1\0\u014d\15\1\0\4\15"+
    "\2\0\7\15\1\0\1\15\1\0\4\15\2\0\51\15\1\0\4\15"+
    "\2\0\41\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15"+
    "\2\0\17\15\1\0\71\15\1\0\4\15\2\0\103\15\45\0\20\15"+
    "\20\0\125\15\14\0\u026c\15\2\0\21\15\1\16\32\15\5\0\113\15"+
    "\6\0\10\15\7\0\15\15\1\0\4\15\16\0\22\15\16\0\22\15"+
    "\16\0\15\15\1\0\3\15\17\0\64\15\43\0\1\15\4\0\1\15"+
    "\103\0\130\15\10\0\51\15\1\0\1\15\5\0\106\15\12\0\37\15"+
    "\61\0\36\15\2\0\5\15\13\0\54\15\25\0\7\15\70\0\27\15"+
    "\11\0\65\15\122\0\1\15\135\0\57\15\21\0\7\15\67\0\36\15"+
    "\15\0\2\15\12\0\54\15\32\0\44\15\51\0\3\15\12\0\44\15"+
    "\153\0\4\15\1\0\4\15\3\0\2\15\11\0\300\15\100\0\u0116\15"+
    "\2\0\6\15\2\0\46\15\2\0\6\15\2\0\10\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\37\15\2\0\65\15\1\0\7\15"+
    "\1\0\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15"+
    "\4\0\15\15\5\0\3\15\1\0\7\15\3\0\13\16\35\0\2\16"+
    "\5\0\1\16\57\0\1\16\21\0\1\15\15\0\1\15\20\0\15\15"+
    "\145\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15"+
    "\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0\13\15"+
    "\2\0\4\15\5\0\5\15\4\0\1\15\64\0\2\15\u0a7b\0\57\15"+
    "\1\0\57\15\1\0\205\15\6\0\4\15\3\0\2\15\14\0\46\15"+
    "\1\0\1\15\5\0\1\15\2\0\70\15\7\0\1\15\20\0\27\15"+
    "\11\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\7\15\1\0\7\15\120\0\1\15\u01d0\0\1\16"+
    "\4\0\2\15\52\0\5\15\5\0\2\15\4\0\126\15\6\0\3\15"+
    "\1\0\132\15\1\0\4\15\5\0\51\15\3\0\136\15\21\0\33\15"+
    "\65\0\20\15\u0200\0\u19b6\15\112\0\u51cd\15\63\0\u048d\15\103\0\56\15"+
    "\2\0\u010d\15\3\0\20\15\12\0\2\15\24\0\57\15\20\0\37\15"+
    "\2\0\106\15\61\0\11\15\2\0\147\15\2\0\4\15\1\0\36\15"+
    "\2\0\2\15\105\0\13\15\1\0\3\15\1\0\4\15\1\0\27\15"+
    "\35\0\64\15\16\0\62\15\76\0\6\15\3\0\1\15\16\0\34\15"+
    "\12\0\27\15\31\0\35\15\7\0\57\15\34\0\1\15\20\0\5\15"+
    "\1\0\12\15\12\0\5\15\1\0\51\15\27\0\3\15\1\0\10\15"+
    "\24\0\27\15\3\0\1\15\3\0\62\15\1\0\1\15\3\0\2\15"+
    "\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15\2\0\13\15"+
    "\7\0\3\15\14\0\6\15\2\0\6\15\2\0\6\15\11\0\7\15"+
    "\1\0\7\15\1\0\53\15\1\0\4\15\4\0\2\15\132\0\43\15"+
    "\35\0\u2ba4\15\14\0\27\15\4\0\61\15\u2104\0\u016e\15\2\0\152\15"+
    "\46\0\7\15\14\0\5\15\5\0\1\15\1\0\12\15\1\0\15\15"+
    "\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\154\15"+
    "\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0\14\15\164\0\5\15"+
    "\1\0\207\15\44\0\32\15\6\0\32\15\13\0\131\15\3\0\6\15"+
    "\2\0\6\15\2\0\6\15\2\0\3\15\43\0\14\15\1\0\32\15"+
    "\1\0\23\15\1\0\2\15\1\0\17\15\2\0\16\15\42\0\173\15"+
    "\u0185\0\35\15\3\0\61\15\57\0\40\15\20\0\21\15\1\0\10\15"+
    "\6\0\46\15\12\0\36\15\2\0\44\15\4\0\10\15\60\0\236\15"+
    "\142\0\50\15\10\0\64\15\234\0\u0137\15\11\0\26\15\12\0\10\15"+
    "\230\0\6\15\2\0\1\15\1\0\54\15\1\0\2\15\3\0\1\15"+
    "\2\0\27\15\12\0\27\15\11\0\37\15\141\0\26\15\12\0\32\15"+
    "\106\0\70\15\6\0\2\15\100\0\1\15\17\0\4\15\1\0\3\15"+
    "\1\0\33\15\54\0\35\15\3\0\35\15\43\0\10\15\1\0\34\15"+
    "\33\0\66\15\12\0\26\15\12\0\23\15\15\0\22\15\156\0\111\15"+
    "\u03ba\0\65\15\113\0\55\15\40\0\31\15\32\0\44\15\51\0\43\15"+
    "\3\0\1\15\14\0\60\15\16\0\4\15\25\0\1\15\45\0\22\15"+
    "\1\0\31\15\204\0\57\15\46\0\10\15\2\0\2\15\2\0\26\15"+
    "\1\0\7\15\1\0\2\15\1\0\5\15\3\0\1\15\37\0\5\15"+
    "\u011e\0\60\15\24\0\2\15\1\0\1\15\270\0\57\15\121\0\60\15"+
    "\24\0\1\15\73\0\53\15\u01f5\0\100\15\37\0\1\15\u01c0\0\71\15"+
    "\u0507\0\u0399\15\u0c67\0\u042f\15\u33d1\0\u0239\15\7\0\37\15\161\0\36\15"+
    "\22\0\60\15\20\0\4\15\37\0\25\15\5\0\23\15\u0370\0\105\15"+
    "\13\0\1\15\102\0\15\15\u4060\0\2\15\u0bfe\0\153\15\5\0\15\15"+
    "\3\0\11\15\7\0\12\15\u1766\0\125\15\1\0\107\15\1\0\2\15"+
    "\2\0\1\15\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15"+
    "\1\0\7\15\1\0\101\15\1\0\4\15\2\0\10\15\1\0\7\15"+
    "\1\0\34\15\1\0\4\15\1\0\5\15\1\0\1\15\3\0\7\15"+
    "\1\0\u0154\15\2\0\31\15\1\0\31\15\1\0\37\15\1\0\31\15"+
    "\1\0\37\15\1\0\31\15\1\0\37\15\1\0\31\15\1\0\37\15"+
    "\1\0\31\15\1\0\10\15\u1034\0\305\15\u053b\0\4\15\1\0\33\15"+
    "\1\0\2\15\1\0\1\15\2\0\1\15\1\0\12\15\1\0\4\15"+
    "\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\3\15\1\0\2\15\1\0\1\15\2\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\2\15"+
    "\1\0\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15"+
    "\1\0\1\15\1\0\12\15\1\0\21\15\5\0\3\15\1\0\5\15"+
    "\1\0\21\15\u1144\0\ua6d7\15\51\0\u1035\15\13\0\336\15\u3fe2\0\u021e\15"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0"

  /** 
   * Translates characters to character classes
   */
  final val ZZ_CMAP: Array[Char] = zzUnpackCMap(ZZ_CMAP_PACKED)

  /** 
   * Translates DFA states to action switch labels.
   */
  private final val ZZ_ACTION = zzUnpackAction()

  private final val ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\0\1\1\3\0\1\1\3\0"+
    "\1\1\2\0\1\1\1\0\1\3";

  def zzUnpackAction(): Array[Int] = {
    val result = new Array[Int](20)
    var offset = 0
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)
    result
  }

  def zzUnpackAction(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      var value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private final val ZZ_ROWMAP = zzUnpackRowMap()

  private final val ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\104\0\125\0\146\0\167"+
    "\0\210\0\231\0\252\0\273\0\314\0\335\0\356\0\377"+
    "\0\u0110\0\u0121\0\u0132\0\42"

  def zzUnpackRowMap(): Array[Int] = {
    val result = new Array[Int](20)
    var offset = 0
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)
    result
  }

  def zzUnpackRowMap(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0  /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      val high = packed.charAt(i) << 16; i += 1
      result(j) = high | packed.charAt(i); j += 1; i += 1
    }
    j
  }

  /** 
   * The transition table of the DFA
   */
  private final val ZZ_TRANS = zzUnpackTrans()

  private final val ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\2\3\1\4\11\3\1\5\2\3\2\0"+
    "\2\6\1\0\1\6\1\0\1\6\10\0\1\6\1\0"+
    "\1\2\14\3\1\0\2\3\1\0\1\2\1\3\1\7"+
    "\12\3\1\0\2\3\16\0\1\5\5\0\1\10\1\0"+
    "\1\11\2\0\1\12\11\0\1\2\14\3\1\0\1\13"+
    "\1\3\4\0\1\14\27\0\1\15\16\0\1\16\10\0"+
    "\1\2\14\3\1\0\1\17\1\3\5\0\1\20\27\0"+
    "\1\3\7\0\1\21\16\0\1\2\14\3\1\0\1\3"+
    "\1\22\6\0\1\23\24\0\1\23\7\0\1\2\4\3"+
    "\1\24\7\3\1\0\2\3\7\0\1\3\11\0";

  def zzUnpackTrans(): Array[Int] = {
    val result = new Array[Int](323)
    var offset = 0
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result)
    result
  }

  def zzUnpackTrans(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      var value = packed.charAt(i).toInt; i += 1
      value -= 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }


  /* error codes */
  private final val ZZ_UNKNOWN_ERROR = 0
  private final val ZZ_NO_MATCH = 1
  private final val ZZ_PUSHBACK_2BIG = 2

  /* error messages for the codes above */
  private final val ZZ_ERROR_MSG = Array[String](
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  )

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final val ZZ_ATTRIBUTE = zzUnpackAttribute()

  private final val ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\1\0\1\1\3\0\1\1\3\0\1\1"+
    "\2\0\1\1\1\0\1\1";

  def zzUnpackAttribute(): Array[Int] = {
    val result = new Array[Int](20)
    var offset = 0
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)
    result
  }

  def zzUnpackAttribute(packed: String, offset: Int, result: Array[Int]): Int = {
    var i = 0       /* index in packed string  */
    var j = offset  /* index in unpacked array */
    val l = packed.length()
    while (i < l) {
      var count = packed.charAt(i).toInt; i += 1
      var value = packed.charAt(i); i += 1
      result(j) = value; j+=1
      count -= 1
      while (count > 0){
        result(j) = value; j+=1
        count -= 1
      }
    }
    j
  }

  /** the input device */
  var zzReader = in

  /** the current state of the DFA */
  var zzState = 0

  /** the current lexical state */
  var zzLexicalState = YYINITIAL

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  var zzBuffer = new Array[Char](ZZ_BUFFERSIZE)

  /** the textposition at the last accepting state */
  var zzMarkedPos = 0

  /** the current text position in the buffer */
  var zzCurrentPos = 0

  /** startRead marks the beginning of the yytext() string in the buffer */
  var zzStartRead = 0

  /** endRead marks the last character in the buffer, that has been read
      from input */
  var zzEndRead = 0

  /** number of newlines encountered up to the start of the matched text */
  var yyline = 0

  /** the number of characters up to the start of the matched text */
  var yychar = 0

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  var yycolumn = 0

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  var zzAtBOL = true

  /** zzAtEOF == true <=> the scanner is at the EOF */
  var zzAtEOF = false

  /** denotes if the user-EOF-code has already been executed */
  var zzEOFDone = false
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  var zzFinalHighSurrogate = 0

  /* user code: */
//  object SmallLexer(r: Reader, props: Properties) extends SmallLexer(r)

  def getNext(): Array[Int] = {
    val txt = yytext()
    getNext(txt, txt)
  }

  def getNext(txt: String, originalText: String): Array[Int] = getNext(txt, originalText, null)

  def getNext(txt: String, originalText: String, annotation: String): Array[Int] = Array[Int](yychar, yylength())



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  def zzUnpackCMap(packed: String): Array[Char] = {
    val map = new Array[Char](0x110000)
    var i = 0  /* index in packed string  */
    var j = 0  /* index in unpacked array */
    while (i < 2450) {
      var count = packed.charAt(i).toInt; i += 1
      val value = packed.charAt(i); i += 1
      map(j) = value; j += 1; count -= 1
      while(count > 0){
        map(j) = value; j += 1; count -= 1
      }
    }
    map
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   */
  @throws[java.io.IOException]("if any I/O-Error occurs")
  def zzRefill(): Boolean = {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead)

      /* translate stored positions */
      zzEndRead-= zzStartRead
      zzCurrentPos-= zzStartRead
      zzMarkedPos-= zzStartRead
      zzStartRead = 0
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      val newBuffer = new Array[Char](zzBuffer.length*2)
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length)
      zzBuffer = newBuffer
      zzEndRead += zzFinalHighSurrogate
      zzFinalHighSurrogate = 0
    }

    /* fill the buffer with new input */
    val requested = zzBuffer.length - zzEndRead
    var numRead = zzReader.read(zzBuffer, zzEndRead, requested)

    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      numRead = zzReader.read(zzBuffer, zzEndRead, requested)
    }
    if (numRead > 0) {
      zzEndRead += numRead
      if (numRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer(zzEndRead - 1))) {
          zzEndRead -= 1
          zzFinalHighSurrogate = 1
        }
      }
      return false
    }

    true
  }

    
  /**
   * Closes the input stream.
   */
  @throws[java.io.IOException]
  def yyclose() = {
    zzAtEOF = true            /* indicate end of file */
    zzEndRead = zzStartRead  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close()
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  def yyreset(reader: java.io.Reader) = {
    zzReader = reader
    zzAtBOL  = true
    zzAtEOF  = false
    zzEOFDone = false
    zzEndRead = 0
    zzStartRead = 0
    zzCurrentPos = 0
    zzMarkedPos = 0
    zzFinalHighSurrogate = 0
    yyline = 0
    yychar = 0
    yycolumn = 0
    zzLexicalState = YYINITIAL
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new Array[Char](ZZ_BUFFERSIZE)
  }


  /**
   * Returns the current lexical state.
   */
  def yystate(): Int = zzLexicalState


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  def yybegin(newState: Int) = {
    zzLexicalState = newState
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  def yytext(): String = new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead )


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  def yycharat(pos: Int): Char = zzBuffer(zzStartRead+pos)


  /**
   * Returns the length of the matched text region.
   */
  def yylength(): Int = zzMarkedPos-zzStartRead


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  def zzScanError(errorCode: Int) = {
    var message = ""
    try {
      message = ZZ_ERROR_MSG(errorCode)
    }
    catch {
      case e: ArrayIndexOutOfBoundsException => message = ZZ_ERROR_MSG(ZZ_UNKNOWN_ERROR)
    }

    throw new Error(message)
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
 def yypushback(number: Int) = {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG)

    zzMarkedPos -= number
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   */
 @throws[java.io.IOException]("if any I/O-Error occurs")
 def next(): Object = {
    var zzInput = -1
    var zzAction = -1

    // cached fields:
    var zzCurrentPosL = -1
    var zzMarkedPosL = -1
    var zzEndReadL = zzEndRead
    var zzBufferL = zzBuffer
    val zzCMapL = ZZ_CMAP

    val zzTransL: Array[Int] = ZZ_TRANS
    val zzRowMapL: Array[Int] = ZZ_ROWMAP
    val zzAttrL: Array[Int] = ZZ_ATTRIBUTE

    var ret: Object = null
    while ((ret == null) && !zzAtEOF) {
      zzMarkedPosL = zzMarkedPos

      yychar += zzMarkedPosL-zzStartRead

      zzAction = -1

      zzCurrentPosL = zzMarkedPosL
      zzCurrentPos = zzMarkedPosL
      zzStartRead = zzMarkedPosL
  
      zzState = ZZ_LEXSTATE(zzLexicalState)

      // set up zzAction for empty match case:
      var zzAttributes = zzAttrL(zzState)
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState
      }


      breakable {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
            zzCurrentPosL += Character.charCount(zzInput)
          }
          else if (zzAtEOF) {
            zzInput = YYEOF
            break
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL
            zzMarkedPos   = zzMarkedPosL
            val eof = zzRefill()
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos
            zzMarkedPosL   = zzMarkedPos
            zzBufferL      = zzBuffer
            zzEndReadL     = zzEndRead
            if (eof) {
              zzInput = YYEOF
              break
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL)
              zzCurrentPosL += Character.charCount(zzInput)
            }
          }
          val zzNext = zzTransL(zzRowMapL(zzState) + zzCMapL(zzInput))
          if (zzNext == -1) break
          zzState = zzNext

          zzAttributes = zzAttrL(zzState)
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState
            zzMarkedPosL = zzCurrentPosL
            if ( (zzAttributes & 8) == 8 ) break
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL

      ret = if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true
        return null;
      }
      else {
        (if (zzAction < 0) zzAction else ZZ_ACTION(zzAction)) match {
          case 1 => 
            {
               getNext()
            }
          case 4 => null // noop
          case 2 => 
            {
               return null;
            }
          case 5 => null // noop
          case 3 => 
            {
               yypushback(3); getNext()
            }
          case 6 => null // noop
          case _ =>
            zzScanError(ZZ_NO_MATCH)
        }
      }
    }
    ret
  }


}
